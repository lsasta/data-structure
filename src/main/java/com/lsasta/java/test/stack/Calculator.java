package com.lsasta.java.test.stack;

public class Calculator {

    public static void main(String[] args) {
        //???????????·??????????????
        String expression = "7*2*2-5+1-5+3-4"; // 15//????????????????
        //????????????????????????
        ArrayStack2 numStack = new ArrayStack2(10);
        ArrayStack2 operStack = new ArrayStack2(10);
        //???????????????
        int index = 0;//???????
        int num1 = 0;
        int num2 = 0;
        int oper = 0;
        int res = 0;
        char ch = ' '; //??ÿ?????õ?char????ch
        String keepNum = ""; //??????? ?????
        //???while????????expression
        while(true) {
            //????õ?expression ??ÿ??????
            ch = expression.substring(index, index+1).charAt(0);
            //???ch???ô???????????????
            if(operStack.isOper(ch)) {//??????????
                //?????????????????
                if(!operStack.isEmpty()) {
                    //????????????????????????,??????????????????????????????????????,????????????pop????????,
                    //?????????pop?????????????????????õ???????????????????????????????
                    while(!operStack.isEmpty() && operStack.priority(ch) <= operStack.priority(operStack.peek())) {
                        num1 = numStack.pop();
                        num2 = numStack.pop();
                        oper = operStack.pop();
                        res = numStack.cal(num1, num2, oper);
                        numStack.push(res);
                    }
                    operStack.push(ch);
                }else {
                    //???????????????..
                    operStack.push(ch); // 1 + 3
                }
            } else { //???????????????????

                //numStack.push(ch - 48); //? "1+3" '1' => 1
                //?????·
                //1. ?????????????????????????????????????????????????????
                //2. ??????????????expression???????index ???????,???????????????????????????
                //3. ????????????????????? ??????????????

                //????????
                keepNum += ch;

                //???ch?????expression?????????????????
                if (index == expression.length() - 1) {
                    numStack.push(Integer.parseInt(keepNum));
                }else{

                    //????????????????????????????????????????????????????????
                    //????????????????index++
                    if (operStack.isOper(expression.substring(index+1,index+2).charAt(0))) {
                        //????????????????????? keepNum = "1" ???? "123"
                        numStack.push(Integer.parseInt(keepNum));
                        //?????!!!!!!, keepNum???
                        keepNum = "";

                    }
                }
            }
            //??index + 1, ???????????expression???.
            index++;
            if (index >= expression.length()) {
                break;
            }
        }

        //???????????????????? ???????????pop?????????????????????.
        while(true) {
            //???????????????????????, ?????????????????????
            if(operStack.isEmpty()) {
                break;
            }
            num1 = numStack.pop();
            num2 = numStack.pop();
            oper = operStack.pop();
            res = numStack.cal(num1, num2, oper);
            numStack.push(res);//???
        }
        //??????????????pop??????????
        int res2 = numStack.pop();
        System.out.printf("???? %s = %d", expression, res2);
    }

}

//?????????,?????????????
//??????? ArrayStack2 ????, ??????????
class ArrayStack2 {
    private int maxSize; // ?????
    private int[] stack; // ???????????????????????????
    private int top = -1;// top??????????????-1

    //??????
    public ArrayStack2(int maxSize) {
        this.maxSize = maxSize;
        stack = new int[this.maxSize];
    }

    //????????????????????????????, ?????????????pop
    public int peek() {
        return stack[top];
    }

    //???
    public boolean isFull() {
        return top == maxSize - 1;
    }
    //???
    public boolean isEmpty() {
        return top == -1;
    }
    //???-push
    public void push(int value) {
        //???????????
        if(isFull()) {
            System.out.println("???");
            return;
        }
        top++;
        stack[top] = value;
    }
    //???-pop, ??????????????
    public int pop() {
        //??????????
        if(isEmpty()) {
            //?????
            throw new RuntimeException("????û??????~");
        }
        int value = stack[top];
        top--;
        return value;
    }
    //?????????[?????]?? ?????????????????????????
    public void list() {
        if(isEmpty()) {
            System.out.println("????û??????~~");
            return;
        }
        //??????????????????
        for(int i = top; i >= 0 ; i--) {
            System.out.printf("stack[%d]=%d\n", i, stack[i]);
        }
    }
    //??????????????????????????????????, ??????????????
    //???????????????????.
    public int priority(int oper) {
        if(oper == '*' || oper == '/'){
            return 1;
        } else if (oper == '+' || oper == '-') {
            return 0;
        } else {
            return -1; // ????????????? +, - , * , /
        }
    }
    //????????????????
    public boolean isOper(char val) {
        return val == '+' || val == '-' || val == '*' || val == '/';
    }
    //??????
    public int cal(int num1, int num2, int oper) {
        int res = 0; // res ????????????
        switch (oper) {
            case '+':
                res = num1 + num2;
                break;
            case '-':
                res = num2 - num1;// ??????
                break;
            case '*':
                res = num1 * num2;
                break;
            case '/':
                res = num2 / num1;
                break;
            default:
                break;
        }
        return res;
    }

}
